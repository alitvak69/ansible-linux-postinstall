---
# vars for vbotka.linux-postinstall

# linux-postinstall repos/keys/packages
#lp_packages_repos:
#  - deb http://packages.cloud.google.com/apt cloud-sdk-artful main
#lp_packages_keys_url:
#  - https://packages.cloud.google.com/apt/doc/apt-key.gpg
#lp_packages_selections_preinstall:
#  - { name: 'ca-certificates', selection: 'hold' }
#lp_packages_autoremove: "yes"
#lp_packages_install:
#  - ansible
#  - google-cloud-sdk
#lp_packages_remove:
#  - aptdaemon
#  - aptdaemon-data

# linux-postinstall modules
#lp_modules:
#  - { name: 'br_netfilter', params: '' }

# linux-postinstall sysctl
# https://help.ubuntu.com/community/Xen
# http://askubuntu.com/questions/243499/how-do-i-set-up-a-xen-bridge
#lp_sysctl_vars:
#  - { var: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
#  - { var: 'net.bridge.bridge-nf-call-iptables', value: '1' }
#  - { var: 'net.bridge.bridge-nf-call-arptables', value: '1' }
#  - { var: 'net.ipv4.ip_forward', value: '1' }
#  - { var: 'net.ipv4.conf.eth0.proxy_arp', value: '1' }

# linux-postinstall udev
#lp_udev_persistent_net_rules:
#  - { kernel: "eth*", mac: "<MAC-ADDRESS>", name: "eth0" }
#  - { kernel: "wlan*", mac: "<MAC-ADDRESS>", name: "wlan0" }
#  - { kernel: "wlan*", mac: "<MAC-ADDRESS>", name: "wlan1" }
#  - { kernel: "wlan*", mac: "<MAC-ADDRESS>", name: "wlan2" }
#  - { kernel: "wlan*", mac: "<MAC-ADDRESS>", name: "wlan3" }
#lp_udev_hci_name_rules:
#  - { product: "Broadcom Bluetooth Device", name: "hci0"}
#  - { product: "CSR8510 A10", name: "hci1" }
# For MAC of BT devices "phys" is used instead of "address".
# There is no phys/address of the controller available in udev
#  - { mac: "<MAC-ADDRESS>", name: "hci0" }
#  - { mac: "<MAC-ADDRESS>", name: "hci1" }
#lp_udev_hci_run_rules:
#  - { product: "Broadcom Bluetooth Device", run: "/bin/hciconfig hci0 up auth encrypt" }
#  - { product: "CSR8510 A10", run: "/bin/hciconfig hci1 up auth encrypt" }
#lp_users:
#  - { name: "admin",
#      shell: "/bin/bash",
#      password: "",
#      update_password: "on_create" }
# SEE: How do I generate crypted passwords for the user module?
# http://docs.ansible.com/ansible/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module
# example: mkpasswd --method=SHA-512 PASSWORD -s SALT
# SALT can be created with: pwgen -s 16 1
#
#lp_users_groups:
#  - { name: "admin", groups: "adm" }
# groups must not comprise primary group

#lp_aliases:
#  - { alias: "root", user: "admin" }

# Copy authorized keys
#lp_authorized_keys:
#  - { user: "admin", key: "{{ lookup('file', '~/.ansible/copy/ssh-pub-keys/admin/id_rsa.pub') }}" }

# Configure /etc/hostname and /etc/hosts
#lp_hostname: "host"
#lp_fqdn: "host.example.com"
#lp_fqdn_ip: "127.0.1.1"
#lp_hosts:
#  - { ip: "10.1.0.10", fqdn: "srv.example.com", hostname: "srv" }

#lp_grub_default:
#  - { var: "GRUB_SAVEDEFAULT", value: "false" }
#  - { var: "GRUB_DEFAULT", value: "0" }
#  - { var: "GRUB_TIMEOUT", value: "10" }
#  - { var: "GRUB_HIDDEN_TIMEOUT", value: "0" }
#  - { var: "GRUB_HIDDEN_TIMEOUT_QUIET", value: "true" }
#  - { var: "GRUB_DISTRIBUTOR", value: "`lsb_release -i -s 2> /dev/null || echo Debian`" }
#  - { var: "GRUB_CMDLINE_LINUX_DEFAULT", value: "\"quiet splash\"" }
#  - { var: "GRUB_CMDLINE_LINUX", value: "\"\"" }

# Configure XEN
#lp_xen: "yes"
#lp_xen_version: "4.8"
#lp_xen_dom0_mem: "4096M"
#lp_xen_dom0_mem_max: "4096M"
#lp_xen_global:
#  - { var: "autoballoon", value: "\"0\"" }

# Configure /etc/pm
#lp_pm: "yes"
#lp_pm_sleepd:
#  55_bluetooth:
#    file: "55_bluetooth"
#    path: "/sbin:/usr/sbin:/bin:/usr/bin"
#    suspend_hibernate:
#      - 'service bluetooth stop'
#      - 'hciconfig hci0 down'
#    resume_thaw:
#      - 'hciconfig hci0 reset'
#      - 'service bluetooth restart'
#      - 'hciconfig hci0 up'
#      - 'hciconfig hci0 auth'
#      - 'hciconfig hci0 encrypt'

# Configure /etc/ssh/ssh_config
#lp_ssh_Protocol: "2"
#lp_ssh_ForwardAgent: "no"
#lp_ssh_ForwardX11: "no"
#lp_ssh_HostbasedAuthentication: "no"
#lp_ssh_StrictHostKeyChecking: "no"
#lp_ssh_Ciphers: " aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc"
#lp_ssh_Tunnel: "no"
#lp_ssh_ServerAliveInterval: "420"
#lp_ssh_config:
#  - { key: Protocol, value: "{{ lp_ssh_Protocol }}" }
#  - { key: ForwardAgent, value: "{{ lp_ssh_ForwardAgent }}" }
#  - { key: ForwardX11, value: "{{ lp_ssh_ForwardX11 }}" }
#  - { key: HostbasedAuthentication, value: "{{ lp_ssh_HostbasedAuthentication }}" }
#  - { key: StrictHostKeyChecking, value: "{{ lp_ssh_StrictHostKeyChecking }}" }
#  - { key: Ciphers, value: "{{ lp_ssh_Ciphers }}" }
#  - { key: Tunnel, value: "{{ lp_ssh_Tunnel }}" }
#  - { key: ServerAliveInterval, value: "{{ lp_ssh_ServerAliveInterval }}" }

# Configure /etc/ssh/sshd_config
#lp_sshd: "yes"
#lp_sshd_PubkeyAuthentication: "yes"
#lp_sshd_PasswordAuthentication: "no"
#lp_sshd_ChallengeResponseAuthentication: "no"
#lp_sshd_PermitRootLogin: "no"
#lp_sshd_PermitTunnel: "no"
#lp_sshd_AllowTcpForwarding: "yes"
#lp_sshd_X11Forwarding: "no"
#lp_sshd_config:
#  - { key: PasswordAuthentication, value: "{{ lp_sshd_PasswordAuthentication }}" }
#  - { key: PubkeyAuthentication, value: "{{ lp_sshd_PubkeyAuthentication }}" }
#  - { key: ChallengeResponseAuthentication, value: "{{ lp_sshd_ChallengeResponseAuthentication }}" }
#  - { key: PermitRootLogin, value: "{{ lp_sshd_PermitRootLogin }}" }
#  - { key: PermitTunnel, value: "{{ lp_sshd_PermitTunnel }}" }
#  - { key: AllowTcpForwarding, value: "{{ lp_sshd_AllowTcpForwarding }}" }
#  - { key: X11Forwarding, value: "{{ lp_sshd_X11Forwarding }}" }

# Configure /etc/bluetooth/main.conf
#lp_bluetooth: "yes"
#lp_bluetooth_ControllerMode: "bredr"
#lp_bluetooth_ControllerMode: "dual"
#lp_bluetooth_main_conf:
#  - { key: ControllerMode, value: "{{ lp_bluetooth_ControllerMode }}" }

# Configure xorg
#lp_xorg_conf:
#  - file: 11-Logitech-MX-Revolution-Mouse.conf
#    section:
#      - { param: Section, val1: "\"InputClass\"", val2: "" }
#      - { param: Identifier, val1: "\"Logitech MX Revolution Mouse\"", val2: "" }
#      - { param: MatchProduct, val1: "\"MX Rev\"", val2: "" }
#      - { param: MatchIsPointer, val1: "\"on\"", val2: "" }
#      - { param: Driver, val1: "\"evdev\"", val2: "" }
#      - { param: Option, val1: "\"Buttonmapping\"", val2: "\"1 8 3 4 5 6 7 2 9 10 11 12 13 14 15 16 17 18 19 20\"" }

# Configure cron
#lp_cron_var:
#  - { user: "vlado", name: "MAILTO", value: "admin@example.com" }
#lp_cron_tab:
#  - { state: "absent", user: "vlado", name: "Run some command", minute: "01", hour: "04", day: "*", month: "*", weekday: "*", command: "/usr/bin/somedirectory/somecommand" }

# Configure ModemManager
#lp_modemmanager: "no"
#lp_modemmanager_override: "manual"

# configure gpsd
#lp_gpsd: "yes"
#lp_gpsd_bt_rfcomm:
#  - { rfcomm: "0", bind: "yes", device: "00:1C:D9:XX:XX:XX", channel: "1", comment: "BT GPS" }
# NOTE: Disable ModemManager to interfere with rfcommX

# configure postfix
#lp_postfix: "yes"
#lp_postfix_inet_protocols: "ipv4"
#lp_postfix_main_conf:
#  - { key: inet_protocols, value: "{{ lp_postfix_inet_protocols }}" } 

# apparmor
#lp_apparmor: "yes"
#lp_apparmor_disable:
#  - firefox
#  - rsyslogd
#lp_apparmor_enforce:
#  - evince
#lp_apparmor_complain:
#  - evince

# smart
#lp_smart: "yes"
#lp_smart_packages:
#  - smartmontools
#lp_smart_service_name: "smartmontools"
#lp_smart_conf_file: "/etc/smartd.conf"
#lp_smart_conf_owner: "root"
#lp_smart_conf_group: "root"
#lp_smart_conf_mode: "644"
# man smartctl
# -a Prints all SMART information about the disk.
# -o [ATA only] Enables or disables SMART automatic offline test, which scans the drive every
#    four  hours  for  disk  defects.
# -S [ATA only] Enables  or  disables  SMART autosave of device vendor-specific Attributes.
# -s Schedule self-tests. Short: daily 2PM. Long: Each Saturday 3PM.
# -m Mail errors to admin.
#lp_smart_devices:
#    - { regexp: "^/dev/sda", line: "/dev/sda -a -o on -S on -s (S/../.././02|L/../../6/03) -m admin" }
#    - { regexp: "^/dev/sdb", line: "/dev/sdb -a -o on -S on -s (S/../.././02|L/../../6/03) -m admin" }
# EOF
...
